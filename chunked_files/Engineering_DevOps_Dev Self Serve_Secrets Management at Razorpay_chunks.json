[
    {
        "id": "engineering_devops_dev-self-serve_secrets-management-at-razorpay-chunk-0",
        "name": "Secrets Management at Razorpay.txt - Introduction",
        "breadcrumb": [
            "Engineering",
            "DevOps",
            "Dev Self Serve"
        ],
        "description": "This section introduces the process of adding secrets to services that use kubestash, a tool for managing secrets in Kubernetes environments. It specifically mentions that if a service was deployed after 2020 and uses the Go programming language, it likely utilizes kubestash for secret management.",
        "use_cases": [
            "Managing secrets for services deployed in Kubernetes environments",
            "Securely storing and accessing sensitive information (e.g., API keys, database credentials) for Go-based services",
            "Centralizing secret management for microservices or distributed applications"
        ],
        "capabilities": [
            "kubestash",
            "secret management",
            "Kubernetes",
            "Go services",
            "centralized secret storage",
            "secure access to sensitive data"
        ],
        "references": []
    },
    {
        "id": "engineering_devops_dev-self-serve_secrets-management-at-razorpay-chunk-1",
        "name": "Secrets Management at Razorpay.txt - Steps to add secrets using credstash-ui",
        "breadcrumb": [
            "Engineering",
            "DevOps",
            "Dev Self Serve"
        ],
        "description": "This section outlines the steps to add secrets or sensitive information using a web-based tool called credstash-ui at Razorpay. It explains how to access the tool for both non-production (staging) and production environments, select the appropriate database table based on the environment, and then add the key-value pairs for the secret you want to store.",
        "use_cases": [
            "Adding secrets or sensitive information for non-production (staging) environments",
            "Adding secrets or sensitive information for production environments",
            "Securely storing and managing sensitive data like API keys, database credentials, etc."
        ],
        "capabilities": [
            "Web-based UI (credstash-ui) for managing secrets",
            "Separate environments for non-production (staging) and production",
            "Different database tables for storing secrets based on environment",
            "Key-value pair storage for secrets",
            "Access control and permissions for production environment"
        ],
        "references": [
            "https://credstash-ui.concierge.stage.razorpay.in/",
            "https://credstash-ui.razorpay.com/>."
        ]
    },
    {
        "id": "engineering_devops_dev-self-serve_secrets-management-at-razorpay-chunk-2",
        "name": "Secrets Management at Razorpay.txt - Explanation of key format",
        "breadcrumb": [
            "Engineering",
            "DevOps",
            "Dev Self Serve"
        ],
        "description": "This section explains the format and structure of the keys used for storing secrets in Razorpay's Secrets Management system. It breaks down the key into three parts: namespace (the Kubernetes namespace for which the secret is intended), secretname (the reference used in deployment specifications), and key (the actual secret key used by the service). It provides guidelines on how to construct these parts based on the service name, environment, and whether the service was generated using go-foundation. The section also mentions handling file-based secrets and general notes on Kubernetes app integration and performance considerations.",
        "use_cases": [
            "Storing and managing secrets for different Kubernetes namespaces and environments (prod, stage, func, perf, etc.)",
            "Integrating secrets with Kubernetes deployments and services",
            "Handling file-based secrets (e.g., certificates) in the Secrets Management system",
            "Monitoring and optimizing the performance of the Secrets Management system"
        ],
        "capabilities": [
            "Namespace-based secret organization",
            "Service-specific secret naming conventions",
            "Environment-specific secret management",
            "Integration with Kubernetes deployments",
            "Handling file-based secrets",
            "Performance monitoring and optimization"
        ],
        "references": [
            "https://github.com/razorpay/kube-manifests/blob/master/templates/capital-cards/templates/deployment.yaml#L77",
            "https://github.com/af-inet/kubestash/issues/2",
            "https://docs.google.com/spreadsheets/d/1b3cjdOCU6K6AG7BDvMI9SNablaU1rf47a2aLGGQGQBA/edit"
        ]
    },
    {
        "id": "engineering_devops_dev-self-serve_secrets-management-at-razorpay-chunk-3",
        "name": "Secrets Management at Razorpay.txt - Note on file-based secrets",
        "breadcrumb": [
            "Engineering",
            "DevOps",
            "Dev Self Serve"
        ],
        "description": "This section discusses some important points regarding the management of secrets using Kubestash, a tool for syncing secrets from a central secrets store to Kubernetes clusters. It highlights that Kubestash cannot sync secrets to the protected 'kube-system' namespace, and that while the underlying secrets store (Credstash) is case-sensitive, Kubestash is not, which could lead to collisions. The section also provides a link to a wiki page that explains how the entire secrets management process works.",
        "use_cases": [
            "Managing and syncing secrets across Kubernetes clusters",
            "Securely storing and retrieving sensitive data (e.g., credentials, API keys) for applications running on Kubernetes",
            "Centralizing secrets management for better control and auditing",
            "Automating the distribution and rotation of secrets in a Kubernetes environment"
        ],
        "capabilities": [
            "Syncing secrets from a central store to Kubernetes clusters",
            "Respecting case-sensitivity in the underlying secrets store (Credstash)",
            "Protecting certain namespaces (e.g., 'kube-system') from syncing secrets",
            "Providing documentation and resources for understanding the secrets management process"
        ],
        "references": [
            "https://wiki.rzp.io/DevOps/kubernetes/kubestash>"
        ]
    }
]