[
    {
        "id": "engineering_devops_processes_access-management_aws_automating-rotation-of-iam-user-access-and-secret-keys-chunk-0",
        "name": "Automating Rotation of IAM User Access and Secret Keys.txt - Changing access keys",
        "breadcrumb": [
            "Engineering",
            "DevOps",
            "Processes",
            "Access Management",
            "AWS"
        ],
        "description": "This section explains that the documentation will guide the reader on how to use AWS Lambda Functions to periodically check for old or expired IAM access keys in their AWS account, and notify the respective users via email using the AWS Simple Email Service (SES). This automated process helps maintain security and compliance by ensuring that IAM access keys are regularly rotated.",
        "use_cases": [
            "Automating the rotation of IAM user access and secret keys",
            "Notifying users when their access keys are due for rotation",
            "Maintaining security and compliance by regularly rotating access keys",
            "Integrating IAM access key rotation into existing IAM operations workflow"
        ],
        "capabilities": [
            "Lambda Functions",
            "Periodic checking of IAM access keys",
            "Notification via Simple Email Service (SES)",
            "Integration with IAM operations workflow"
        ],
        "references": []
    },
    {
        "id": "engineering_devops_processes_access-management_aws_automating-rotation-of-iam-user-access-and-secret-keys-chunk-1",
        "name": "Automating Rotation of IAM User Access and Secret Keys.txt - The components required to incorporate automatic IAM access key rotation",
        "breadcrumb": [
            "Engineering",
            "DevOps",
            "Processes",
            "Access Management",
            "AWS"
        ],
        "description": "This section outlines the key components required for automating the rotation of IAM (Identity and Access Management) user access and secret keys in AWS. It explains that AWS Lambda is used to generate API calls to IAM services for rotating and updating keys, while Amazon CloudWatch initiates events on a daily basis to trigger the rotation process. IAM provides user access and secret keys for accessing AWS resources and services from non-AWS systems. AWS Secrets Manager stores the rotated secrets, and Amazon Simple Email Service (SES) sends notifications whenever keys are changed.",
        "use_cases": [
            "Automating the rotation of IAM user access and secret keys",
            "Securing access to AWS resources and services from non-AWS systems",
            "Storing and managing rotated secrets",
            "Receiving notifications when keys are changed"
        ],
        "capabilities": [
            "AWS Lambda for generating API calls to IAM services",
            "Amazon CloudWatch for initiating daily events",
            "AWS IAM for providing user access and secret keys",
            "AWS Secrets Manager for storing secrets",
            "Amazon SES for sending notifications"
        ],
        "references": []
    },
    {
        "id": "engineering_devops_processes_access-management_aws_automating-rotation-of-iam-user-access-and-secret-keys-chunk-2",
        "name": "Automating Rotation of IAM User Access and Secret Keys.txt - Steps for automatic key rotation",
        "breadcrumb": [
            "Engineering",
            "DevOps",
            "Processes",
            "Access Management",
            "AWS"
        ],
        "description": "This section outlines the steps involved in an automated process for rotating access keys and secret keys for IAM users. It describes a solution that utilizes AWS services like Lambda, CloudWatch Events, and Secrets Manager to periodically create new keys, disable old keys, and notify users about the key rotation. The process aims to enhance security by regularly updating sensitive credentials.",
        "use_cases": [
            "Automating rotation of IAM user access keys and secret keys",
            "Enhancing security by regularly updating sensitive credentials",
            "Notifying application owners about key rotation"
        ],
        "capabilities": [
            "Automatic key rotation",
            "Key creation and storage in Secrets Manager",
            "Key disabling and deletion",
            "User notification via SES",
            "Scheduled events using CloudWatch Events",
            "Integration with AWS services (Lambda, Secrets Manager, CloudWatch Events, SES)"
        ],
        "references": []
    },
    {
        "id": "engineering_devops_processes_access-management_aws_automating-rotation-of-iam-user-access-and-secret-keys-chunk-3",
        "name": "Automating Rotation of IAM User Access and Secret Keys.txt - Setting Up the Key Rotation",
        "breadcrumb": [
            "Engineering",
            "DevOps",
            "Processes",
            "Access Management",
            "AWS"
        ],
        "description": "This section outlines the policy for automating the rotation of access keys and secret keys for IAM (Identity and Access Management) users. It states that all IAM users must use a new set of access and secret keys every 70 days. This rotation process helps enhance security by regularly invalidating old keys, reducing the risk of unauthorized access if keys are compromised.",
        "use_cases": [
            "Enforcing regular rotation of IAM user access keys and secret keys",
            "Enhancing security by invalidating old keys periodically",
            "Automating the key rotation process for IAM users",
            "Complying with security best practices for key management"
        ],
        "capabilities": [
            "IAM user access key rotation",
            "IAM user secret key rotation",
            "Automated key rotation",
            "Policy-based key rotation",
            "Periodic key invalidation",
            "Security enhancement through key rotation"
        ],
        "references": []
    },
    {
        "id": "engineering_devops_processes_access-management_aws_automating-rotation-of-iam-user-access-and-secret-keys-chunk-4",
        "name": "Automating Rotation of IAM User Access and Secret Keys.txt - Creating AWS Lambda Functions",
        "breadcrumb": [
            "Engineering",
            "DevOps",
            "Processes",
            "Access Management",
            "AWS"
        ],
        "description": "This section explains the process of creating AWS Lambda functions, which are serverless functions that can be triggered by events or scheduled to run automatically. The section mentions that the Lambda function has three sub-functions, but it does not provide details about what these sub-functions do. The section also mentions that the previous access key and secret key should be disabled every 80 days and deleted every 90 days, which suggests that the Lambda functions are related to automating the rotation of IAM user access and secret keys.",
        "use_cases": [
            "Automating the rotation of IAM user access and secret keys",
            "Scheduling tasks to run automatically",
            "Triggering functions based on events"
        ],
        "capabilities": [
            "Creating AWS Lambda functions",
            "Disabling previous access keys and secret keys",
            "Deleting previous access keys and secret keys",
            "Scheduling tasks",
            "Event-driven execution"
        ],
        "references": []
    },
    {
        "id": "engineering_devops_processes_access-management_aws_automating-rotation-of-iam-user-access-and-secret-keys-chunk-5",
        "name": "Automating Rotation of IAM User Access and Secret Keys.txt - Working of the Lambda function",
        "breadcrumb": [
            "Engineering",
            "DevOps",
            "Processes",
            "Access Management",
            "AWS"
        ],
        "description": "This section explains the working of a Lambda function that automates the rotation of IAM (Identity and Access Management) user access and secret keys in AWS (Amazon Web Services). It describes three main functions: Create_Key, Disable_Key, and Delete_Key. The Lambda function uses the Boto3 Python SDK to interact with AWS resources. It fetches IAM user information, lists access keys, creates new keys, disables older keys, and deletes deactivated keys. The process helps maintain security by regularly rotating access keys.",
        "use_cases": [
            "Automating rotation of IAM user access and secret keys",
            "Maintaining security by regularly rotating access keys",
            "Managing access keys for real users and bot users"
        ],
        "capabilities": [
            "Create new IAM access keys",
            "Add new keys to AWS Secrets Manager",
            "Send notifications to subscribed users",
            "Disable older access keys",
            "Delete deactivated access keys",
            "Fetch IAM user information",
            "List access keys for IAM users",
            "Differentiate between real and bot users using user tags"
        ],
        "references": [
            "https://alpha.razorpay.com/_static/file/3046ea1cb65704d62df6bf576f52f56c.png",
            "https://alpha.razorpay.com/_static/file/111a20879293087055d2621140469431.png"
        ]
    },
    {
        "id": "engineering_devops_processes_access-management_aws_automating-rotation-of-iam-user-access-and-secret-keys-chunk-6",
        "name": "Automating Rotation of IAM User Access and Secret Keys.txt - Benefits of this solution provide",
        "breadcrumb": [
            "Engineering",
            "DevOps",
            "Processes",
            "Access Management",
            "AWS"
        ],
        "description": "This section outlines the key benefits of the proposed solution for automating the rotation of IAM (Identity and Access Management) user access and secret keys in AWS (Amazon Web Services). It highlights the ability to manage the lifecycle of these credentials based on configurable time periods, enhancing security and compliance through improved visibility and auditability, while maintaining scalability. Additionally, it mentions the secure storage and masking of IAM keys and secrets using AWS Secrets Manager.",
        "use_cases": [
            "Automated rotation of IAM user access and secret keys",
            "Improved security and compliance through enhanced visibility and auditability",
            "Secure storage and management of sensitive credentials"
        ],
        "capabilities": [
            "IAM access keys and secrets lifecycle management",
            "Configurable time periods for rotation",
            "Enhanced visibility and auditability",
            "Improved security posture and compliance",
            "Scalability",
            "Secure storage and masking of IAM keys and secrets",
            "AWS Secrets Manager integration"
        ],
        "references": []
    }
]