[
    {
        "id": "engineering_backend_guides_add-secrets-to-credstash-|-kubestash-(payments)-chunk-0",
        "name": "Add secrets to credstash | kubestash (payments).txt - I want to add a secret to be added to kubestash / credstash. What should I do?",
        "breadcrumb": [
            "Engineering",
            "Backend",
            "Guides"
        ],
        "description": "This section outlines the process for adding, editing, viewing, and copying secrets in the credstash/kubestash system used for storing sensitive information. It provides instructions for non-production and production environments, including raising requests through a dedicated Slack channel for production secrets. The section emphasizes the importance of following proper procedures to maintain security and avoid exposing sensitive data.",
        "use_cases": [
            "Adding a new secret to credstash/kubestash",
            "Editing or overwriting an existing secret",
            "Viewing the value of a secret",
            "Copying secrets from one namespace to another or from one key to another"
        ],
        "capabilities": [
            "Self-service secret addition/overwriting for non-production environments",
            "Dedicated Slack channel for requesting production secret addition/modification",
            "Tagging specific user groups for production secret requests",
            "Secure sharing of sensitive secrets using a password-protected paste service",
            "Rotating application pods to pick up updated secrets",
            "Raising BAD tickets for viewing secret values (restricted access)",
            "Credstash admins can overwrite but not read secrets"
        ],
        "references": [
            "https://app.slack.com/client/T0276T56F/C03Q6TX9F8E/thread/C02PTJ737PZ-1656040370.774659",
            "https://app.slack.com/client/T0276T56F/C03Q6TX9F8E/user_groups/S03PYUZ545V",
            "https://paste.razorpay.com/",
            "https://razorpay.atlassian.net/jira/software/c/projects/BAD/issues"
        ]
    },
    {
        "id": "engineering_backend_guides_add-secrets-to-credstash-|-kubestash-(payments)-chunk-1",
        "name": "Add secrets to credstash | kubestash (payments).txt - I want to edit the secret. What should I do?",
        "breadcrumb": [
            "Engineering",
            "Backend",
            "Guides"
        ],
        "description": "This section explains the process for editing or deleting secrets stored in a secure storage system called Credstash or Kubestash, which is used for managing sensitive information like passwords and API keys. It mentions that only the DevOps team has the necessary access to perform these actions. If someone wants to edit a secret, they need to raise a ticket in the BAD project on the Jira issue tracking system, which will be handled by the DevOps team. Similarly, for deleting secrets, the same process of raising a BAD ticket is required.",
        "use_cases": [
            "Editing existing secrets stored in Credstash/Kubestash",
            "Deleting existing secrets stored in Credstash/Kubestash",
            "Requesting access to modify secrets from the DevOps team",
            "Tracking and managing requests for secret modifications through the Jira ticketing system"
        ],
        "capabilities": [
            "Secure storage of sensitive information (secrets)",
            "Access control for modifying secrets",
            "Ticketing system for requesting secret modifications",
            "DevOps team responsible for managing secrets",
            "Jira integration for tracking and managing requests"
        ],
        "references": [
            "https://razorpay.atlassian.net/jira/software/c/projects/BAD/issues"
        ]
    },
    {
        "id": "engineering_backend_guides_add-secrets-to-credstash-|-kubestash-(payments)-chunk-2",
        "name": "Add secrets to credstash | kubestash (payments).txt - I want to see the value of a secret. What should I do?",
        "breadcrumb": [
            "Engineering",
            "Backend",
            "Guides"
        ],
        "description": "This section explains that only the DevOps team has access to view the value of a secret stored in the credstash or kubestash system. If someone needs to access a secret, they need to raise a BAD (presumably a ticket system) ticket to request access. The section also mentions that credstash supports storing multi-line secrets, such as certificates.",
        "use_cases": [
            "Viewing the value of a secret",
            "Requesting access to view a secret",
            "Storing multi-line secrets like certificates"
        ],
        "capabilities": [
            "Access control for viewing secrets",
            "Ticketing system for requesting access",
            "Support for multi-line secrets",
            "Storing certificates"
        ],
        "references": [
            "https://razorpay.atlassian.net/jira/software/c/projects/BAD/issues"
        ]
    },
    {
        "id": "engineering_backend_guides_add-secrets-to-credstash-|-kubestash-(payments)-chunk-3",
        "name": "Add secrets to credstash | kubestash (payments).txt - I want to copy secrets from one namespace to another or from one key to another. What should I do?",
        "breadcrumb": [
            "Engineering",
            "Backend",
            "Guides"
        ],
        "description": "This section explains that Credstash supports storing multi-line secrets through its regular user interface. It mentions that applications should have the capability to read and process these multi-line secrets correctly. Additionally, it states that in the Mozart application, multi-line secrets are mounted as files in each pod, and Mozart reads these files to ensure proper formatting and handling of the secrets.",
        "use_cases": [
            "Storing multi-line secrets in Credstash",
            "Reading and processing multi-line secrets in applications",
            "Mounting multi-line secrets as files in pods (specific to Mozart application)"
        ],
        "capabilities": [
            "Multi-line secret storage",
            "Regular user interface for secret management",
            "Application support for reading multi-line secrets",
            "Mounting secrets as files in pods",
            "Ensuring proper formatting of secrets"
        ],
        "references": []
    },
    {
        "id": "engineering_backend_guides_add-secrets-to-credstash-|-kubestash-(payments)-chunk-4",
        "name": "Add secrets to credstash | kubestash (payments).txt - I want to delete secrets. What should I do?",
        "breadcrumb": [
            "Engineering",
            "Backend",
            "Guides"
        ],
        "description": "This section explains that the credstash UI does not support deleting secrets. It suggests that if you need to store binary secrets, you may need to encode them (e.g., base64, hex encoding) before adding them to credstash. The encoding and decoding process should be handled by the application owners, not credstash or its administrators. The section also provides a format for requesting the addition or overwrite of secrets.",
        "use_cases": [
            "Storing binary secrets in credstash",
            "Encoding and decoding secrets for storage",
            "Requesting addition or overwrite of secrets"
        ],
        "capabilities": [
            "Encoding secrets (base64, hex)",
            "Decoding secrets",
            "Adding secrets",
            "Overwriting secrets",
            "Requesting secret addition/overwrite"
        ],
        "references": []
    },
    {
        "id": "engineering_backend_guides_add-secrets-to-credstash-|-kubestash-(payments)-chunk-5",
        "name": "Add secrets to credstash | kubestash (payments).txt - I want to add certificates / multi-line secrets. Does credstash support it?",
        "breadcrumb": [
            "Engineering",
            "Backend",
            "Guides"
        ],
        "description": "This section provides instructions for adding multi-line secrets or certificates to credstash, which is a secure credential storage system. It suggests reaching out to the @payments_credstash_admins team to add the specified secrets for a particular service in the production environment. The section includes sample key names and refers to a documentation link for any namespace-specific information.",
        "use_cases": [
            "Storing multi-line secrets or certificates securely",
            "Managing secrets for different services or environments",
            "Centralized credential management for teams or organizations",
            "Secure storage of sensitive information like API keys, passwords, or certificates"
        ],
        "capabilities": [
            "Multi-line secret storage",
            "Certificate storage",
            "Service-specific secret management",
            "Environment-specific secret management",
            "Namespace-specific configuration",
            "Centralized credential management",
            "Secure credential storage"
        ],
        "references": [
            "https://alpha.razorpay.com/repo/add-secrets-to-credstash-kubestash-payments"
        ]
    },
    {
        "id": "engineering_backend_guides_add-secrets-to-credstash-|-kubestash-(payments)-chunk-6",
        "name": "Add secrets to credstash | kubestash (payments).txt - I want to add binary data as secrets. Does credstash support it?",
        "breadcrumb": [
            "Engineering",
            "Backend",
            "Guides"
        ],
        "description": "This section explains how to add binary data as secrets to credstash or kubestash, which are tools used for securely storing and managing sensitive information like passwords, API keys, and other confidential data. It provides an example of a secret addition request, which includes a sample key name and a link to a paste service where the actual secret data is stored. The section also mentions that the password for accessing the secret data will be shared with an admin once they pick up the request.",
        "use_cases": [
            "Securely storing and managing sensitive information like passwords, API keys, and other confidential data",
            "Sharing sensitive data with authorized personnel (e.g., admins) in a secure manner",
            "Providing an example or template for submitting secret addition requests",
            "Demonstrating the use of tools like credstash or kubestash for secret management"
        ],
        "capabilities": [
            "Adding binary data as secrets",
            "Storing secrets in a secure paste service",
            "Sharing secret access credentials (e.g., passwords) with authorized personnel",
            "Submitting secret addition requests with sample key names",
            "Providing visual examples or screenshots of the secret addition process"
        ],
        "references": [
            "https://alpha.razorpay.com/_static/file/153fe7064d0761fd46f2468c9f2fd791.png",
            "https://paste.razorpay.com/<some-real-url>"
        ]
    },
    {
        "id": "engineering_backend_guides_add-secrets-to-credstash-|-kubestash-(payments)-chunk-7",
        "name": "Add secrets to credstash | kubestash (payments).txt - Use the below format to request for secret addition / overwrite",
        "breadcrumb": [
            "Engineering",
            "Backend",
            "Guides"
        ],
        "description": "This section provides an inventory of tables and key formats used in the credstash and kubestash systems for storing and managing secrets across different services, environments, and namespaces. It outlines the naming conventions and structures for organizing secrets, enabling teams to securely store and retrieve sensitive information like API keys, database credentials, and other confidential data.",
        "use_cases": [
            "Securely storing and retrieving secrets for different services (e.g., Mozart, pg-router, API) across multiple environments (prod, stage, dev-serve, perf, automation).",
            "Managing secrets across different namespaces or contexts within a service (e.g., mozart, mozart-dark, mozart-whitelisted, mozart-pagination).",
            "Providing a centralized inventory of tables and key formats for easy reference and management of secrets.",
            "Enabling teams to follow consistent naming conventions and structures for organizing and accessing secrets."
        ],
        "capabilities": [
            "Centralized secret management",
            "Multi-environment support",
            "Multi-namespace support",
            "Consistent naming conventions",
            "Structured key formats",
            "Inventory of tables and keys"
        ],
        "references": [
            "https://credstash-ui.razorpay.com/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/",
            "https://credstash-ui.razorpay.com/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/",
            "https://credstash-ui.razorpay.com/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/"
        ]
    },
    {
        "id": "engineering_backend_guides_add-secrets-to-credstash-|-kubestash-(payments)-chunk-8",
        "name": "Add secrets to credstash | kubestash (payments).txt - Sample Secret addition request",
        "breadcrumb": [
            "Engineering",
            "Backend",
            "Guides"
        ],
        "description": "This section provides information about adding secrets to credstash, which is a secure credential storage system. It lists three different environments (prod, stage, and func) along with their respective URLs for accessing the credstash user interface. The section suggests that users need to provide a key name (<key_name>) to store or retrieve secrets in each environment.",
        "use_cases": [
            "Securely storing sensitive credentials or secrets in different environments (production, staging, and functional)",
            "Accessing the credstash user interface for managing secrets",
            "Retrieving secrets using a key name in a specific environment"
        ],
        "capabilities": [
            "Secure credential storage",
            "Environment-specific credential management",
            "Web-based user interface for credstash",
            "Key-based secret retrieval"
        ],
        "references": [
            "https://credstash-ui.razorpay.com/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/"
        ]
    },
    {
        "id": "engineering_backend_guides_add-secrets-to-credstash-|-kubestash-(payments)-chunk-9",
        "name": "Add secrets to credstash | kubestash (payments).txt - Credstash Inventory of tables and key formats",
        "breadcrumb": [
            "Engineering",
            "Backend",
            "Guides"
        ],
        "description": "This section provides an inventory of various tables and key formats used in the Credstash and Kubestash systems for storing and managing secrets across different environments (e.g., stage, prod, perf, bvt) and services (e.g., Consumer App, mozart, terminals, payments-card, payments-upi). It outlines the table names, environment names, key naming conventions, and any additional comments or instructions for each service or component.",
        "use_cases": [
            "Storing and managing secrets for different services and environments",
            "Accessing secrets from Credstash or Kubestash UI for specific services and environments",
            "Understanding key naming conventions and formats for different services and components",
            "Identifying the appropriate table and key format for a specific service or environment"
        ],
        "capabilities": [
            "Centralized secret management",
            "Environment-specific secret storage",
            "Service-specific secret storage",
            "Key naming conventions",
            "Credstash and Kubestash integration",
            "Web UI for accessing secrets"
        ],
        "references": [
            "https://credstash-ui.concierge.stage.razorpay.in/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/",
            "https://credstash-ui.razorpay.com/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/",
            "https://credstash-ui.razorpay.com/dist/",
            "https://github.com/razorpay/payments-upi",
            "https://credstash-ui.razorpay.com/dist/",
            "https://credstash-ui.razorpay.com/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/",
            "https://credstash-ui.concierge.stage.razorpay.in/dist/"
        ]
    }
]